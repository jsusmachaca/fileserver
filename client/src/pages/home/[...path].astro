---
import Layout from '../../layouts/Layout.astro'
import type { FileSystemResponse } from "../../types/global"
import Gallery from '../../components/Gallery.astro'
import SideMenu from "../../components/SideMenu.astro"
import apiClient from '../../config/apiClient'
import UploadIcon from '../../components/icons/UploadIcon.astro'
import ModalForm from '../../components/ModalForm.astro'

const cookie = Astro.cookies.get('Authentication')
if (!cookie?.value) {
  return Astro.redirect('/login')
}

const { path } = Astro.params

let currentDirectory = `/list/${path || ''}`

const fetchContent = async (dir: string) => {
  try {
    const res = await apiClient.get<FileSystemResponse>(dir, {
      headers: {
        Authorization: `Bearer ${cookie.value}`
      }
    })
    return res.data
  } catch (err) {
    return null
  }
}

const res = await fetchContent(currentDirectory)

if (!res || !res.files) {
  console.log(res)
  return Astro.redirect('404')
}

const resources = res.files.map((file) => {
  const fileType = file.name.split('.').pop()?.toLowerCase()
  const isImage = ['jpg', 'jpeg', 'png', 'gif', 'avif', 'webp'].includes(fileType!)
  const isVideo = ['mp4', 'mov', 'avi', 'webm', 'mkv', 'wav'].includes(fileType!)

  if (isImage) {
    return {
      type: 'image',
      url: file.url,
      text: file.name
    }
  } else if (isVideo) {
      return {
        type: 'video',
        url: file.url,
        text: file.name
      }
  } else {
    return {
      type: 'file',
      url: file.url,
      text: file.name
    }
  }
})
---

<Layout title='Jesus Machaca File System Server' description='bro'>
  <main class='flex min-h-screen  text-gray-100'>
    <SideMenu directories={res.dirs} />
    <section id='main-content' class='flex-1 ml-64'>
      <Gallery resources={resources} token={cookie.value} />
    </section>
  </main>
  <button id='upload-button' class='fixed bottom-8 left-72 p-4 bg-blue-600 text-white rounded-full shadow-lg hover:bg-blue-700 transition-colors duration-300'>
    <UploadIcon />
  </button>
  <ModalForm idModal='upload-modal'>
    <div class="bg-gray-800 p-6 rounded-lg max-w-md w-full">
      <h2 class="text-2xl font-bold mb-4 text-gray-100">Subir Archivo</h2>
      <form id='upload-form'>
        <div class="mb-4">
          <label html-for="file-upload" class="block text-sm font-medium text-gray-300 mb-2">
            Selecciona un archivo
          </label>
          <input
            id="file-upload"
            name="file-upload"
            type="file"
            class="block w-full text-sm text-gray-300
              file:mr-4 file:py-2 file:px-4
              file:rounded-md file:border-0
              file:text-sm file:font-semibold
              file:bg-blue-600 file:text-white
              hover:file:bg-blue-700
              file:cursor-pointer"
          />
        </div>
        <div class="flex justify-end">
          <button
            type="button"
            class="mr-2 px-4 py-2 text-sm font-medium text-gray-300 hover:text-gray-100"
          >
            Cancelar
          </button>
          <button
            type="submit"
            class="px-4 py-2 text-sm font-medium text-white bg-blue-600 rounded-md hover:bg-blue-700"
          >
            Subir
          </button>
        </div>
      </form>
    </div>
  </ModalForm>
</Layout>

<script>
import axios, { AxiosError } from "axios"

const uploadForm = document.getElementById('upload-form')
const modal = document.getElementById('upload-modal')!
const uploadButton = document.getElementById('upload-button')!
const fileInput = document.getElementById('file-upload') as HTMLInputElement
  
uploadButton.addEventListener('click', () => {
  if (modal) {
    modal.classList.remove('hidden')
  }
})

modal?.addEventListener('click', (e) => {
  if (e.target === modal) {
    modal.classList.add('hidden')
  }
})

uploadForm?.addEventListener('submit', async (e) => {
  try {
    e.preventDefault()

    const file = fileInput.files![0]
    const formData = new FormData()
    formData.append('file', file)

    const path = window.location.pathname.split('/').filter((name) => {
      return name !== 'home' && name !== ''
    }).join('/')

    let url: string
    if (path === '') {
      url = '/api/upload'
    } else {
      url = `/api/upload/${path}`
    }

    const { data } = await axios.post(url, formData, {
      headers: {
        'Content-Type': 'multipart/form-data'
      }
    })

    modal.classList.add('hidden')
    if (data.message) {
      window.location.reload()
    }
  } catch (err) {
    if (err instanceof AxiosError) {
      console.error(err.response?.data)
    } else {
      console.error((err as Error).message)
    }
  }
})
</script>